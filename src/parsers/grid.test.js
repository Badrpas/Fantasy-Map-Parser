const parseGrid = require('./grid');

const zeroLine = `{"spacing":13.41,"cellsX":143,"cellsY":70,"boundary":[[1,-13]]}`;
const firstLine = "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,5,5,4,5,2,0,2,5,3,3,3,6,8,5,7,7,10,10,7,9,9,7,8,10,12,11,1";
const secondLine = "16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16";
const thirdLine = "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1";
const fourthLine = '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-7,-7,-7,-7,-7,-7,-6,-5,-4,-4,-4,-4,-4,-5,-4,-3,-2';
const fifthLine = "-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3";

describe('Parse Grid', () => {
  it('valid input', () => {
    const result = parseGrid(zeroLine, firstLine, secondLine, thirdLine, fourthLine, fifthLine);

    expect(result).toEqual({
      spacing: 13.41,
      cellsX: 143,
      cellsY: 70,
      boundary: [ [ 1, -13 ] ],
      cells: {
        h: [
          '0',  '0', '0', '0', '0', '0', '0',  '0',
          '0',  '0', '0', '0', '0', '0', '0',  '0',
          '0',  '0', '0', '0', '0', '0', '0',  '0',
          '0',  '0', '0', '0', '1', '3', '3',  '5',
          '5',  '4', '5', '2', '0', '2', '5',  '3',
          '3',  '3', '6', '8', '5', '7', '7',  '10',
          '10', '7', '9', '9', '7', '8', '10', '12',
          '11', '1'
        ],
        prec: [
          '16', '16', '16', '16', '16', '16',
          '16', '16', '16', '16', '16', '16',
          '16', '16', '16', '16', '16', '16',
          '16', '16', '16', '16', '16', '16',
          '16', '16', '16', '16', '16', '16',
          '16', '16', '16', '16', '16', '16',
          '16', '16', '16', '16', '16', '16',
          '16'
        ],
        f: [
          '1', '1', '1', '1', '1', '1', '1', '1',
          '1', '1', '1', '1', '1', '1', '1', '1',
          '1', '1', '1', '1', '1', '1', '1', '1',
          '1', '1', '1', '1', '1', '1', '1', '1',
          '1', '1', '1', '1', '1', '1', '1', '1',
          '1', '1', '1', '1', '1', '1', '1', '1',
          '1'
        ],
        t: [
          '0',  '0',  '0',  '0',  '0',  '0',  '0',  '0',  '0',
          '0',  '0',  '0',  '0',  '0',  '0',  '0',  '0',  '0',
          '0',  '0',  '0',  '0',  '0',  '0',  '0',  '0',  '0',
          '0',  '0',  '0',  '0',  '0',  '0',  '0',  '0',  '0',
          '0',  '0',  '0',  '0',  '0',  '0',  '0',  '0',  '0',
          '0',  '0',  '-7', '-7', '-7', '-7', '-7', '-7', '-6',
          '-5', '-4', '-4', '-4', '-4', '-4', '-5', '-4', '-3',
          '-2'
        ],
        temp: [
          '-3', '-3', '-3', '-3', '-3', '-3',
          '-3', '-3', '-3', '-3', '-3', '-3',
          '-3', '-3', '-3', '-3', '-3', '-3',
          '-3', '-3', '-3', '-3', '-3', '-3',
          '-3', '-3', '-3', '-3', '-3', '-3',
          '-3', '-3', '-3', '-3', '-3', '-3',
          '-3', '-3', '-3', '-3', '-3', '-3',
          '-3'
        ]
      }
    });
  });
});